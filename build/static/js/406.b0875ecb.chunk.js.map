{"version":3,"file":"static/js/406.b0875ecb.chunk.js","mappings":"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","sources":["../node_modules/fuse.js/dist/fuse.mjs","pages/SearchPage.tsx"],"sourcesContent":["/**\n * Fuse.js v7.1.0 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2025 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n  let getFn = null;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n    getFn = key.getFn;\n  }\n\n  return { path, id, weight, src, getFn }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When `true`, the algorithm will ignore diacritics (accents) in comparisons\n  ignoreDiacritics: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false,\n  // The weight to determine how much field length norm effects scoring.\n  fieldNormWeight: 1\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(weight = 1, mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      // Default function is 1/sqrt(x), weight makes that variable\n      const norm = 1 / Math.pow(numTokens, 0.5 * weight);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({\n    getFn = Config.getFn,\n    fieldNormWeight = Config.fieldNormWeight\n  } = {}) {\n    this.norm = norm(fieldNormWeight, 3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          } else ;\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (isString(value) && !isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(\n  keys,\n  docs,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(\n  data,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore$1(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore$1(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore$1(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore$1(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore$1(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nconst stripDiacritics = String.prototype.normalize\n    ? ((str) => str.normalize('NFD').replace(/[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F]/g, ''))\n    : ((str) => str);\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreDiacritics = Config.ignoreDiacritics,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreDiacritics,\n      ignoreLocation\n    };\n\n    pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    pattern = ignoreDiacritics ? stripDiacritics(pattern) : pattern;\n    this.pattern = pattern;\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, ignoreDiacritics, includeMatches } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n    text = ignoreDiacritics ? stripDiacritics(text) : text;\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreDiacritics = Config.ignoreDiacritics,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreDiacritics,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreDiacritics = Config.ignoreDiacritics,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      ignoreDiacritics,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    pattern = ignoreDiacritics ? stripDiacritics(pattern) : pattern;\n    this.pattern = pattern;\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive, ignoreDiacritics } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n    text = ignoreDiacritics ? stripDiacritics(text) : text;\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn,\n        fieldNormWeight: this.options.fieldNormWeight\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      const res = [];\n      for (let i = 0, len = node.children.length; i < len; i += 1) {\n        const child = node.children[i];\n        const result = evaluate(child, item, idx);\n        if (result.length) {\n          res.push(...result);\n        } else if (node.operator === LogicalOperator.AND) {\n          return []\n        }\n      }\n      return res\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '7.1.0';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport { Fuse as default };\n","import React, { useState, useEffect, useMemo, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { SearchBar, SearchResults } from '../components';\r\nimport { SearchResult, Ayah, Surah } from '../types';\r\nimport { fetchSurahs, fetchSurahVerses } from '../services';\r\nimport { useLanguage } from '../context';\r\nimport { getSearchHistory, clearSearchHistory } from '../utils/localStorage';\r\nimport Fuse from 'fuse.js';\r\n\r\nexport const SearchPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [query, setQuery] = useState('');\r\n  const [allData, setAllData] = useState<{ surahs: Surah[]; ayahs: Ayah[] }>({ surahs: [], ayahs: [] });\r\n  const [history, setHistory] = useState<string[]>([]);\r\n  const { language, isEnglishEnabled, isBanglaEnabled } = useLanguage();\r\n  const [rawResults, setRawResults] = useState<SearchResult[]>([]);\r\n  const [selectedSurahId, setSelectedSurahId] = useState<number | 'all'>('all');\r\n  const [selectedJuz, setSelectedJuz] = useState<number | 'all'>('all');\r\n  const THEME_TAGS = useMemo(() => [\r\n    'mercy', 'patience', 'forgiveness', 'justice', 'gratitude', 'guidance', 'faith', 'charity'\r\n  ], []);\r\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\r\n  const [visibleCount, setVisibleCount] = useState<number>(20);\r\n  const sentinelRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  // Load all data for search\r\n  useEffect(() => {\r\n    const loadSearchData = async () => {\r\n      try {\r\n        // Clear cache to ensure fresh data\r\n        sessionStorage.clear();\r\n        \r\n        const surahs = await fetchSurahs();\r\n        // Load first 10 surahs' verses for better search coverage\r\n        const ayahsPromises = surahs.slice(0, 10).map(surah => fetchSurahVerses(surah.id));\r\n        const ayahsArrays = await Promise.all(ayahsPromises);\r\n        const ayahs = ayahsArrays.flat();\r\n        \r\n        console.log(`Loaded ${ayahs.length} verses from ${surahs.length} surahs for search`);\r\n        setAllData({ surahs, ayahs });\r\n      } catch (error) {\r\n        console.error('Failed to load search data:', error);\r\n      }\r\n    };\r\n\r\n    loadSearchData();\r\n    setHistory(getSearchHistory());\r\n  }, []);\r\n\r\n  const performSearch = async (searchQuery: string) => {\r\n    if (!searchQuery.trim()) {\r\n      setRawResults([]);\r\n      setSearchResults([]);\r\n      setVisibleCount(20);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    \r\n    try {\r\n      const results: SearchResult[] = [];\r\n      \r\n      // Search in Surah names\r\n      const surahFuse = new Fuse(allData.surahs, {\r\n        keys: ['englishName', 'banglaName'],\r\n        threshold: 0.3,\r\n      });\r\n      \r\n      const surahMatches = surahFuse.search(searchQuery);\r\n      surahMatches.forEach(match => {\r\n        // For each matching surah, add its first verse as a result\r\n        const firstAyah = allData.ayahs.find(ayah => ayah.surahId === match.item.id);\r\n        if (firstAyah) {\r\n          results.push({\r\n            ayah: firstAyah,\r\n            surah: match.item,\r\n            matchType: 'surah_name',\r\n            highlightedText: match.item.englishName\r\n          });\r\n        }\r\n      });\r\n\r\n      // Search in translations\r\n      const searchKeys: string[] = [];\r\n      if (isEnglishEnabled) searchKeys.push('english');\r\n      if (isBanglaEnabled) searchKeys.push('bangla');\r\n\r\n      if (searchKeys.length > 0) {\r\n        const ayahFuse = new Fuse(allData.ayahs, {\r\n          keys: searchKeys,\r\n          threshold: 0.4,\r\n        });\r\n\r\n        const ayahMatches = ayahFuse.search(searchQuery);\r\n        ayahMatches.forEach(match => {\r\n          const surah = allData.surahs.find(s => s.id === match.item.surahId);\r\n          if (surah) {\r\n            const matchType = match.matches?.[0]?.key as 'english' | 'bangla' || 'english';\r\n            results.push({\r\n              ayah: match.item,\r\n              surah,\r\n              matchType,\r\n              highlightedText: match.matches?.[0]?.value || ''\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      // Remove duplicates first\r\n      const uniqueResults = results.filter((result, index, self) => \r\n        index === self.findIndex(r => r.ayah.id === result.ayah.id)\r\n      );\r\n\r\n      setRawResults(uniqueResults);\r\n      // Apply filters, tags and limit\r\n      let filtered = uniqueResults;\r\n      if (selectedSurahId !== 'all') {\r\n        filtered = filtered.filter(r => r.ayah.surahId === selectedSurahId);\r\n      }\r\n      if (selectedJuz !== 'all') {\r\n        filtered = filtered.filter(r => r.ayah.juzNumber === selectedJuz);\r\n      }\r\n      if (selectedTags.length > 0) {\r\n        filtered = filtered.filter(r => {\r\n          const text = `${r.ayah.english} ${r.ayah.bangla}`.toLowerCase();\r\n          return selectedTags.some(tag => text.includes(tag.toLowerCase()));\r\n        });\r\n      }\r\n      setVisibleCount(20);\r\n      setSearchResults(filtered.slice(0, 20));\r\n    } catch (error) {\r\n      console.error('Search failed:', error);\r\n      setSearchResults([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSearch = (searchQuery: string) => {\r\n    setQuery(searchQuery);\r\n    performSearch(searchQuery);\r\n    setHistory(getSearchHistory());\r\n  };\r\n\r\n  // Re-apply filters and tags when state changes\r\n  useEffect(() => {\r\n    let filtered = rawResults;\r\n    if (selectedSurahId !== 'all') {\r\n      filtered = filtered.filter(r => r.ayah.surahId === selectedSurahId);\r\n    }\r\n    if (selectedJuz !== 'all') {\r\n      filtered = filtered.filter(r => r.ayah.juzNumber === selectedJuz);\r\n    }\r\n    if (selectedTags.length > 0) {\r\n      filtered = filtered.filter(r => {\r\n        const text = `${r.ayah.english} ${r.ayah.bangla}`.toLowerCase();\r\n        return selectedTags.some(tag => text.includes(tag.toLowerCase()));\r\n      });\r\n    }\r\n    setVisibleCount(20);\r\n    setSearchResults(filtered.slice(0, 20));\r\n  }, [selectedSurahId, selectedJuz, selectedTags, rawResults]);\r\n\r\n  // Infinite scroll via intersection observer\r\n  useEffect(() => {\r\n    const node = sentinelRef.current;\r\n    if (!node) return;\r\n    const observer = new IntersectionObserver((entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n          setVisibleCount((prev) => Math.min(prev + 20, rawResults.length));\r\n        }\r\n      });\r\n    });\r\n    observer.observe(node);\r\n    return () => observer.disconnect();\r\n  }, [rawResults.length]);\r\n\r\n  const handleResultClick = (surahId: number, ayahNumber: number) => {\r\n    navigate(`/surah/${surahId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Search Header */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\r\n        <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\r\n          Search the Qur'an\r\n        </h1>\r\n        <SearchBar \r\n          onSearch={handleSearch}\r\n          placeholder=\"Search for verses, keywords, or Surah names...\"\r\n        />\r\n        {/* Filters */}\r\n        <div className=\"mt-4 grid grid-cols-1 sm:grid-cols-3 gap-3\">\r\n          <div>\r\n            <label className=\"block text-xs text-gray-600 dark:text-gray-300 mb-1\">Surah</label>\r\n            <select\r\n              value={selectedSurahId}\r\n              onChange={(e) => setSelectedSurahId(e.target.value === 'all' ? 'all' : parseInt(e.target.value))}\r\n              className=\"w-full text-sm bg-transparent border border-gray-300 dark:border-gray-600 rounded px-2 py-1\"\r\n            >\r\n              <option value=\"all\">All</option>\r\n              {allData.surahs.map(s => (\r\n                <option key={s.id} value={s.id}>{s.id}. {s.englishName}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-xs text-gray-600 dark:text-gray-300 mb-1\">Juz</label>\r\n            <select\r\n              value={selectedJuz}\r\n              onChange={(e) => setSelectedJuz(e.target.value === 'all' ? 'all' : parseInt(e.target.value))}\r\n              className=\"w-full text-sm bg-transparent border border-gray-300 dark:border-gray-600 rounded px-2 py-1\"\r\n            >\r\n              <option value=\"all\">All</option>\r\n              {Array.from({ length: 30 }, (_, i) => i + 1).map(j => (\r\n                <option key={j} value={j}>Juz {j}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-xs text-gray-600 dark:text-gray-300 mb-1\">Themes</label>\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              {THEME_TAGS.map(tag => {\r\n                const active = selectedTags.includes(tag);\r\n                return (\r\n                  <button\r\n                    key={tag}\r\n                    type=\"button\"\r\n                    onClick={() => setSelectedTags(prev => active ? prev.filter(t => t !== tag) : [...prev, tag])}\r\n                    className={`px-2 py-1 text-xs rounded-full border ${active ? 'bg-primary-600 text-white border-primary-600' : 'border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-200'}`}\r\n                  >\r\n                    {tag}\r\n                  </button>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {history.length > 0 && (\r\n          <div className=\"mt-4\">\r\n            <div className=\"flex items-center justify-between mb-2\">\r\n              <span className=\"text-sm text-gray-600 dark:text-gray-300\">Recent searches</span>\r\n              <button\r\n                onClick={() => { clearSearchHistory(); setHistory([]); }}\r\n                className=\"text-xs text-red-600 dark:text-red-400 hover:underline\"\r\n              >\r\n                Clear\r\n              </button>\r\n            </div>\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              {history.map((term, i) => (\r\n                <button\r\n                  key={`${term}-${i}`}\r\n                  onClick={() => handleSearch(term)}\r\n                  className=\"px-2 py-1 text-xs rounded-full bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-600\"\r\n                >\r\n                  {term}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Search Results */}\r\n      <SearchResults\r\n        results={searchResults.slice(0, visibleCount)}\r\n        loading={loading}\r\n        query={query}\r\n        onResultClick={handleResultClick}\r\n      />\r\n\r\n      {/* Infinite scroll sentinel */}\r\n      <div ref={sentinelRef} className=\"h-8\" />\r\n\r\n      {/* Search Tips */}\r\n      {!query && (\r\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6\">\r\n          <h3 className=\"text-lg font-medium text-blue-900 dark:text-blue-200 mb-3\">\r\n            Search Tips\r\n          </h3>\r\n          <ul className=\"text-blue-800 dark:text-blue-300 space-y-2 text-sm\">\r\n            <li>• Search for specific words or phrases in translations</li>\r\n            <li>• Use Surah names to find specific chapters</li>\r\n            <li>• Search works in both English and Bengali based on your language settings</li>\r\n            <li>• Results are limited to the first 5 Surahs for demo purposes</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};"],"names":["isArray","value","Array","getTag","isString","isNumber","isBoolean","isObject","isObjectLike","isDefined","undefined","isBlank","trim","length","Object","prototype","toString","call","hasOwn","hasOwnProperty","KeyStore","constructor","keys","this","_keys","_keyMap","totalWeight","forEach","key","obj","createKey","push","id","weight","get","keyId","toJSON","JSON","stringify","path","src","getFn","createKeyPath","createKeyId","Error","name","MISSING_KEY_PROPERTY","INVALID_KEY_WEIGHT_VALUE","split","join","Config","isCaseSensitive","ignoreDiacritics","includeScore","shouldSort","sortFn","a","b","score","idx","includeMatches","findAllMatches","minMatchCharLength","location","threshold","distance","useExtendedSearch","list","arr","deepGet","index","result","baseToString","i","len","ignoreLocation","ignoreFieldNorm","fieldNormWeight","SPACE","FuseIndex","arguments","norm","mantissa","cache","Map","m","Math","pow","numTokens","match","has","n","parseFloat","round","set","clear","isCreated","setIndexRecords","setSources","docs","records","setKeys","_keysMap","create","doc","docIndex","_addString","_addObject","add","size","removeAt","splice","getValueForItemAtKeyId","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","map","computeScore$1","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","MAX_BITS","search","text","patternAlphabet","patternLen","textLen","max","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","start","finish","bitArr","j","charMatch","charAt","isMatch","indices","matchmask","end","convertMaskToIndices","createPatternAlphabet","char","stripDiacritics","String","normalize","str","replace","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","searchIn","allIndices","totalScore","hasMatches","_ref","BaseMatch","isMultiMatch","getMatch","multiRegex","isSingleMatch","singleRegex","exp","matches","FuzzyMatch","super","_bitapSearch","type","IncludeMatch","searchers","startsWith","endsWith","searchersLen","SPACE_RE","MultiMatchSet","Set","ExtendedSearch","query","filter","results","queryItem","found","searcher","token","parseQuery","condition","_","numMatches","qLen","pLen","registeredSearchers","createSearcher","searcherClass","LogicalOperator","KeyType","isExpression","convertToExplicit","parse","auto","next","isQueryPath","isPath","isLeaf","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","node","children","operator","transformMatches","data","refIndex","transformScore","Fuse","_keyStore","setCollection","_docs","_myIndex","remove","predicate","getIndex","limit","_searchStringList","_searchObjectList","_searchLogical","_ref2","_ref3","Number","EPSILON","computeScore","sort","slice","transformers","transformer","format","_ref4","expression","evaluate","_findMatches","res","child","resultMap","_ref5","expResults","_ref6","_ref7","_ref8","_ref9","version","parseIndex","config","register","SearchPage","navigate","useNavigate","searchResults","setSearchResults","useState","loading","setLoading","setQuery","allData","setAllData","surahs","ayahs","history","setHistory","language","isEnglishEnabled","isBanglaEnabled","useLanguage","rawResults","setRawResults","selectedSurahId","setSelectedSurahId","selectedJuz","setSelectedJuz","THEME_TAGS","useMemo","selectedTags","setSelectedTags","visibleCount","setVisibleCount","sentinelRef","useRef","useEffect","async","sessionStorage","fetchSurahs","ayahsPromises","surah","fetchSurahVerses","Promise","all","flat","console","log","error","loadSearchData","getSearchHistory","handleSearch","searchQuery","firstAyah","find","ayah","surahId","matchType","highlightedText","englishName","searchKeys","s","_match$matches","_match$matches$","_match$matches2","_match$matches2$","uniqueResults","self","findIndex","r","filtered","juzNumber","english","bangla","some","tag","includes","performSearch","current","observer","IntersectionObserver","entries","entry","isIntersecting","prev","observe","disconnect","_jsxs","className","_jsx","SearchBar","onSearch","placeholder","onChange","e","target","parseInt","from","active","onClick","t","clearSearchHistory","term","SearchResults","onResultClick","handleResultClick","ayahNumber","ref"],"sourceRoot":""}