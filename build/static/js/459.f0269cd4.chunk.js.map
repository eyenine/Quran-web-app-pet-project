{"version":3,"file":"static/js/459.f0269cd4.chunk.js","mappings":"2LAOO,MAAMA,EAAsBA,KAEjC,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAA6B,OAC7D,QAAEC,IAAYC,EAAAA,EAAAA,KACdC,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYN,EAAAA,EAAAA,UAAuB,OAC1CO,EAASC,IAAcR,EAAAA,EAAAA,WAAS,IAChCS,EAAOC,IAAYV,EAAAA,EAAAA,UAAwB,OAElDW,EAAAA,EAAAA,WAAU,KACUC,WAChB,IAAKX,GAAWY,MAAMC,OAAOb,IAG3B,OAFAS,EAAS,yBACTF,GAAW,GAIb,IACEA,GAAW,GACXE,EAAS,MACT,MAAMK,QAAkBC,EAAAA,EAAAA,IAAWF,OAAOb,IAE1C,GAAKc,EAEE,CAEL,MAAME,GAAUC,EAAAA,EAAAA,KAACC,EAAAA,GAAS,CAACd,MAAOU,IAClChB,EAAekB,EACjB,MALEP,EAAS,kBAMb,CAAE,MAAOU,GACPV,EAASU,aAAeC,MAAQD,EAAIE,QAAU,uBAChD,CAAC,QACCd,GAAW,EACb,GAGFe,IACC,CAACtB,IAGJ,MAAMuB,GAAiBC,EAAAA,EAAAA,SAAQ,KAC7BP,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,4BAA2BC,UACxCT,EAAAA,EAAAA,KAACU,EAAAA,GAAc,CAACC,KAAK,QAAQC,KAAK,uBAEnC,IAEGC,EAAcA,KAClBrB,EAAS,MACTJ,EAAS,MACTE,GAAW,GAEXwB,OAAOC,SAASC,UAGlB,OAAI3B,EACKiB,EAGLf,GAEA0B,EAAAA,EAAAA,MAAA,OAAKT,UAAU,yBAAwBC,SAAA,EACrCT,EAAAA,EAAAA,KAACkB,EAAAA,GAAY,CACXC,MAAM,uBACNf,QAASb,EACT6B,QAASP,KAEXb,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,mBAAkBC,UAC/BT,EAAAA,EAAAA,KAAA,UACEqB,QAASA,IAAMpC,EAAS,KACxBuB,UAAU,wFAAuFC,SAClG,oBAQJ7B,IAEDqC,EAAAA,EAAAA,MAAA,OAAKT,UAAU,oBAAmBC,SAAA,EAChCT,EAAAA,EAAAA,KAAA,KAAGQ,UAAU,mCAAkCC,SAAC,qBAChDT,EAAAA,EAAAA,KAAA,UACEqB,QAASA,IAAMpC,EAAS,KACxBuB,UAAU,6FAA4FC,SACvG,kB","sources":["pages/SurahPage.tsx"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\nimport { JSX } from 'react/jsx-runtime';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { fetchSurah } from '../services';\nimport { Surah } from '../types';\nimport { SurahView, LoadingSpinner, ErrorMessage } from '../components';\n\nexport const SurahPage: React.FC = () => {\n  // Memoize the page content to prevent unnecessary re-renders\n  const [pageContent, setPageContent] = useState<JSX.Element | null>(null);\n  const { surahId } = useParams<{ surahId: string }>();\n  const navigate = useNavigate();\n  const [surah, setSurah] = useState<Surah | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadSurah = async () => {\n      if (!surahId || isNaN(Number(surahId))) {\n        setError('Invalid Surah ID');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        const surahData = await fetchSurah(Number(surahId));\n        \n        if (!surahData) {\n          setError('Surah not found');\n        } else {\n          // Create page content once and memoize it\n          const content = <SurahView surah={surahData} />;\n          setPageContent(content);\n        }\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load Surah');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadSurah();\n  }, [surahId]);\n\n  // Memoize the loading spinner to prevent unnecessary re-renders\n  const loadingSpinner = useMemo(() => (\n    <div className=\"flex justify-center py-12\">\n      <LoadingSpinner size=\"large\" text=\"Loading Surah...\" />\n    </div>\n  ), []);\n\n  const handleRetry = () => {\n    setError(null);\n    setSurah(null);\n    setLoading(true);\n    // Re-trigger the effect\n    window.location.reload();\n  };\n\n  if (loading) {\n    return loadingSpinner;\n  }\n\n  if (error) {\n    return (\n      <div className=\"max-w-2xl mx-auto mt-8\">\n        <ErrorMessage\n          title=\"Failed to Load Surah\"\n          message={error}\n          onRetry={handleRetry}\n        />\n        <div className=\"mt-4 text-center\">\n          <button\n            onClick={() => navigate('/')}\n            className=\"px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-md transition-colors\"\n          >\n            Go to Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!pageContent) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-gray-500 dark:text-gray-400\">Surah not found</p>\n        <button\n          onClick={() => navigate('/')}\n          className=\"mt-4 px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-md transition-colors\"\n        >\n          Go to Home\n        </button>\n      </div>\n    );\n  }\n\n  return pageContent;\n};"],"names":["SurahPage","pageContent","setPageContent","useState","surahId","useParams","navigate","useNavigate","surah","setSurah","loading","setLoading","error","setError","useEffect","async","isNaN","Number","surahData","fetchSurah","content","_jsx","SurahView","err","Error","message","loadSurah","loadingSpinner","useMemo","className","children","LoadingSpinner","size","text","handleRetry","window","location","reload","_jsxs","ErrorMessage","title","onRetry","onClick"],"sourceRoot":""}