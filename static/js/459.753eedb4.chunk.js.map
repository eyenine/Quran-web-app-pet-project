{"version":3,"file":"static/js/459.753eedb4.chunk.js","mappings":"4LAOO,MAAMA,EAAsBA,KAEjC,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAA6B,OAC7D,QAAEC,IAAYC,EAAAA,EAAAA,KACdC,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYN,EAAAA,EAAAA,UAAuB,OAC1CO,EAASC,IAAcR,EAAAA,EAAAA,WAAS,IAChCS,EAAOC,IAAYV,EAAAA,EAAAA,UAAwB,OAElDW,EAAAA,EAAAA,WAAU,KACUC,WAChB,IAAKX,GAAWY,MAAMC,OAAOb,IAG3B,OAFAS,EAAS,yBACTF,GAAW,GAIb,IACEA,GAAW,GACXE,EAAS,MACT,MAAMK,QAAkBC,EAAAA,EAAAA,IAAWF,OAAOb,IAE1C,GAAKc,EAEE,CAEL,MAAME,GAAUC,EAAAA,EAAAA,KAACC,EAAAA,GAAS,CAACd,MAAOU,IAClChB,EAAekB,EACjB,MALEP,EAAS,kBAMb,CAAE,MAAOU,GACPV,EAASU,aAAeC,MAAQD,EAAIE,QAAU,uBAChD,CAAC,QACCd,GAAW,EACb,GAGFe,IACC,CAACtB,IAGJ,MAAMuB,GAAiBC,EAAAA,EAAAA,SAAQ,KAC7BP,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,4BAA2BC,UACxCT,EAAAA,EAAAA,KAACU,EAAAA,GAAc,CAACC,KAAK,QAAQC,KAAK,uBAEnC,IAEGC,EAAcA,KAClBrB,EAAS,MACTJ,EAAS,MACTE,GAAW,GAEXwB,OAAOC,SAASC,UAGlB,OAAI3B,EACKiB,EAGLf,GAEA0B,EAAAA,EAAAA,MAAA,OAAKT,UAAU,yBAAwBC,SAAA,EACrCT,EAAAA,EAAAA,KAACkB,EAAAA,GAAY,CACXC,MAAM,uBACNf,QAASb,EACT6B,QAASP,KAEXb,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,mBAAkBC,UAC/BT,EAAAA,EAAAA,KAAA,UACEqB,QAASA,IAAMpC,EAAS,KACxBuB,UAAU,wFAAuFC,SAClG,oBAQJ7B,IAEDqC,EAAAA,EAAAA,MAAA,OAAKT,UAAU,oBAAmBC,SAAA,EAChCT,EAAAA,EAAAA,KAAA,KAAGQ,UAAU,mCAAkCC,SAAC,qBAChDT,EAAAA,EAAAA,KAAA,UACEqB,QAASA,IAAMpC,EAAS,KACxBuB,UAAU,6FAA4FC,SACvG,kB","sources":["pages/SurahPage.tsx"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\r\nimport { JSX } from 'react/jsx-runtime';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { fetchSurah } from '../services';\r\nimport { Surah } from '../types';\r\nimport { SurahView, LoadingSpinner, ErrorMessage } from '../components';\r\n\r\nexport const SurahPage: React.FC = () => {\r\n  // Memoize the page content to prevent unnecessary re-renders\r\n  const [pageContent, setPageContent] = useState<JSX.Element | null>(null);\r\n  const { surahId } = useParams<{ surahId: string }>();\r\n  const navigate = useNavigate();\r\n  const [surah, setSurah] = useState<Surah | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const loadSurah = async () => {\r\n      if (!surahId || isNaN(Number(surahId))) {\r\n        setError('Invalid Surah ID');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        const surahData = await fetchSurah(Number(surahId));\r\n        \r\n        if (!surahData) {\r\n          setError('Surah not found');\r\n        } else {\r\n          // Create page content once and memoize it\r\n          const content = <SurahView surah={surahData} />;\r\n          setPageContent(content);\r\n        }\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to load Surah');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadSurah();\r\n  }, [surahId]);\r\n\r\n  // Memoize the loading spinner to prevent unnecessary re-renders\r\n  const loadingSpinner = useMemo(() => (\r\n    <div className=\"flex justify-center py-12\">\r\n      <LoadingSpinner size=\"large\" text=\"Loading Surah...\" />\r\n    </div>\r\n  ), []);\r\n\r\n  const handleRetry = () => {\r\n    setError(null);\r\n    setSurah(null);\r\n    setLoading(true);\r\n    // Re-trigger the effect\r\n    window.location.reload();\r\n  };\r\n\r\n  if (loading) {\r\n    return loadingSpinner;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"max-w-2xl mx-auto mt-8\">\r\n        <ErrorMessage\r\n          title=\"Failed to Load Surah\"\r\n          message={error}\r\n          onRetry={handleRetry}\r\n        />\r\n        <div className=\"mt-4 text-center\">\r\n          <button\r\n            onClick={() => navigate('/')}\r\n            className=\"px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-md transition-colors\"\r\n          >\r\n            Go to Home\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!pageContent) {\r\n    return (\r\n      <div className=\"text-center py-12\">\r\n        <p className=\"text-gray-500 dark:text-gray-400\">Surah not found</p>\r\n        <button\r\n          onClick={() => navigate('/')}\r\n          className=\"mt-4 px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-md transition-colors\"\r\n        >\r\n          Go to Home\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return pageContent;\r\n};"],"names":["SurahPage","pageContent","setPageContent","useState","surahId","useParams","navigate","useNavigate","surah","setSurah","loading","setLoading","error","setError","useEffect","async","isNaN","Number","surahData","fetchSurah","content","_jsx","SurahView","err","Error","message","loadSurah","loadingSpinner","useMemo","className","children","LoadingSpinner","size","text","handleRetry","window","location","reload","_jsxs","ErrorMessage","title","onRetry","onClick"],"sourceRoot":""}